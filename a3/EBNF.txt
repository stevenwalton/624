# Start Rule (8.1) interpreter_block ::= skip | { statement } | { function_decl } | { statement }{ function_decl }

# Statements (8.2)
statement ::= compound_statement | expr_statement | selection_statement | do_while_statement | while_statement | jump_statement
where:
compound_statement ::= '{' { statement } '}'
expr_statement ::= ';' | assignment_expr ';'
selection_statement ::= 'if' '(' expr ')' statement 'else' statement | 'if' '(' expr ')' statement
for_statement ::= 'for' '(' IDENTIFIER 'in' expr ')' statement
do_while_statement ::= 'do' statement 'while' '(' expr ')' ';'
while_statement ::= 'while' '(' expr ')' statement
jump_statement ::= 'next' ';' | 'break' ';' | 'return' expr ';' | 'return' ';'

# Long format
statement ::= '{' { statement } '}' | ';' | assignment_expr ';' | 'if' '(' expr ')' statement | 'if' '(' expr ')' statement 'else' statement 
              | 'for' '(' IDENTIFIER 'in' expr ')' statement 
              | 'do' statement 'while' '(' expr ')' ';' | 'while' '(' expr ')' statement | 'next' ';' | 'break' ';' | 'return' expr ';' | 'return' ';'

# Expressions (8.3)
expr ::= conditional_expr
assignment_expr ::= conditional_expr '=' conditional_expr | conditional_expr
conditional_expr ::= logical_or_expr '?' conditional_expr 'else' conditional_expr | logical_or_expr
logical_or_expr ::= logical_or_expr { '|' logical_or_expr }
logical_and_expr ::= equality_expr { '&' equality_expr }
equality_expr ::= relational_expr { { [ != | == ] } relational_expr }
relational_expr ::= add_expr { [ '<' | '<=' | '>' | '>=' ] add_expr }
# add_expr ::= mult_expr { { '+' mult_expr } | { '-' mult_expr } }
add_expr ::= mult_expr { [ '+' | '-' ] { mult_expr } }
mult_expr ::= seq_expr { ['*' | '/' | '%' ] seq_expr } 
seq_expr ::= exp_expr | exp_expr ':' exp_expr
exp_expr ::= unary_expr | unary_expr '^' exp_expr
         ::= unary_expr { '^' unary_expr }
unary_expr ::= [ '!' | '+' | '-' ] unary_expr | postfix_expr
postfix_expr ::= { '.' IDENTIFIER 
                 | '(' argument_expr_list ')' 
                 | '(' ')'
                 | '[' { ',' } ']'
                 | '[' { ',' expr } ']'
                 | '[' expr { ',' } ']'
                 | '[' expr { ',' expr } ']' }
primary_expr ::= IDENTIFIER | constant | '(' expr ')'
argument_expr ::= conditional_expr | IDENTIFIER '=' conditional_expr
constant ::= NUMBER_LITERAL | STRING_LITERAL

# Function Declarations (8.4)
function_decl ::= 'function' return_type_spec IDENTIFIER param_list compound_statement
return_type_spec ::= '(' type_spec ')'
type_spec ::= 'void' | 'void' '$'
              | 'NULL' | 'NULL' '$'
              | 'logical' | 'logical' '$'
              | 'integer' | 'integer' '$'
              | 'float' | 'float' '$'
              | 'string' | 'string' '$' 
              | 'object' | 'object' object_class_spec
              | 'object' '$' | 'object' object_class_spec '$'
              | 'numeric' | 'numeric' '$'
              | '+' | '+' '$'
              | '*' | '*' '$'
              | { 'v' | 'N' | 'l' | 'i' | 'f' | 's' | 'o' | 'o' object_class_spac }
              | { 'v' | 'N' | 'l' | 'i' | 'f' | 's' | 'o' | 'o' object_class_spac } '$'
object_class_spec ::= '<' IDENTIFIER '>'
param_list ::= '(' 'void' ')' | '(' param_spec { ',' param_spec } ')'
param_spec ::= type_spec IDENTIFIER 
               | '[' type_spec IDENTIFIER '=' constant ']'
               | '[' type_spec IDENTIFIER '=' IDENTIFIER ']'

